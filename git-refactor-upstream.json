{
    "local": [
        {
            "type": "add-diagnostic",
            "condition": "$true -AND -not $params.rename -AND -not $params.remove",
            "parameters": {
                "message": "Either -rename or -remove must be specfied."
            }
        },
        {
            "type": "add-diagnostic",
            "condition": "$params.rename -AND $params.remove",
            "parameters": {
                "message": "Only one of -rename and -remove may be specified."
            }
        },
        {
            "type": "validate-branch-names",
            "parameters": {
                "branches": ["$params.source", "$params.target"]
            }
        },
        {
            "type": "get-all-upstreams",
            "id": "originalUpstreams",
            "parameters": {}
        },
        {
            "id": "upstreamResult",
            // This is not truly a recursive script, but a loop to compute the upstream branches that should change
            "type": "recurse",
            "parameters": {
                "inputParameters": "$actions.originalUpstreams.outputs.Keys | ForEach-Object { @{ target = $params.target; source = $params.source; current = $_; upstream = $actions.originalUpstreams.outputs[$_] } }",
                "path": "git-refactor-upstream.loop.json"
            }
        },
        {
            "id": "removeRename",
            "type": "evaluate",
            "parameters": {
                "result": "$actions.upstreamResult.outputs + @{ $params.source = $null } + ($params.rename ? @{ $params.target = $actions.originalUpstreams.outputs[$params.source] } : @{})"
            }
        },
        {
            "id": "upstreamHash",
            "type": "set-upstream",
            "parameters": {
                "upstreamBranches": "$actions.removeRename.outputs",
                "message": "Rewrite $($params.source) to $($params.target)$($params.comment -eq '' ? '' : \" for $($params.comment)\")"
            }
        }
    ],
    "finalize": [
        {
            "type": "set-branches",
            "parameters": {
                "branches": {
                    "$config.upstreamBranch": "$actions.upstreamHash.outputs.commit"
                }
            }
        }
    ],
    "output": [
        "$($params.source) has been replaced with $(params.target) in the following branches: $($actions.upstreamResult.outputs.Keys)"
    ]
}