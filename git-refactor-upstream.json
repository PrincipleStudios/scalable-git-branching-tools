{
    "local": [
        {
            "type": "add-diagnostic",
            "condition": "$true -AND -not $params.rename -AND -not $params.remove",
            "parameters": {
                "message": "Either -rename or -remove must be specfied."
            }
        },
        {
            "type": "add-diagnostic",
            "condition": "$params.rename -AND $params.remove",
            "parameters": {
                "message": "Only one of -rename and -remove may be specified."
            }
        },
        {
            "type": "validate-branch-names",
            "parameters": {
                "branches": ["$params.source", "$params.target"]
            }
        },
        {
            "type": "get-all-upstreams",
            "id": "originalUpstreams",
            "parameters": {}
        },
        {
            "type": "get-downstream",
            "id": "sourceDownstreams",
            "parameters": {
                "target": "$params.source",
                "recurse": true
            }
        },
        {
            "type": "get-downstream",
            "id": "targetDownstreams",
            "parameters": {
                "target": "$params.target",
                "recurse": true
            }
        },
        {
            "id": "filterRename",
            "type": "filter-branches",
            "condition": "$params.rename",
            "parameters": {
                "include": ["$actions.originalUpstreams.outputs[$params.target]", "$actions.originalUpstreams.outputs[$params.source]"],
                "exclude": ["$params.source", "$params.target"]
            }
        },
        {
            "id": "alteredUpstreams",
            "type": "evaluate",
            "parameters": {
                "result": "$actions.originalUpstreams.outputs + @{}"
            }
        },
        {
            "id": "rename",
            "type": "evaluate",
            "condition": "$params.rename",
            "parameters": {
                "result": "$actions.alteredUpstreams.outputs[$params.target] = [string[]]$actions.filterRename.outputs"
            }
        },
        {
            "id": "upstreamResult",
            // This is not truly a recursive script, but a loop to compute the upstream branches that should change
            "type": "recurse",
            "parameters": {
                "inputParameters": "$actions.alteredUpstreams.outputs.Keys | ForEach-Object { @{ target = $params.target; source = $params.source; current = $_; upstream = $actions.alteredUpstreams.outputs[$_] } }",
                "path": "git-refactor-upstream.loop.1.json"
            }
        },
        {
            "type": "evaluate",
            "id": "affected",
            "parameters": {
                "result": ["$params.target", "$actions.sourceDownstreams.outputs", "$params.rename ? $actions.targetDownstreams.outputs : @()"]
            }
        },
        {
            "id": "simplifyAll",
            // This is not truly a recursive script, but a loop to compute the upstream branches that should change
            "type": "recurse",
            "parameters": {
                "inputParameters": "$actions.affected.outputs | Where-Object { $_ } | ForEach-Object { @{ current = $_; original = $actions.originalUpstreams.outputs[$_]; upstream = $actions.upstreamResult.outputs[$_] ?? $actions.alteredUpstreams.outputs[$_]; override = $actions.upstreamResult.outputs } }",
                "path": "git-refactor-upstream.loop.2.json"
            }
        },
        {
            "id": "remove",
            "type": "evaluate",
            "parameters": {
                "result": "$actions.simplifyAll.outputs[$params.source] = $null"
            }
        },
        {
            "id": "upstreamHash",
            "type": "set-upstream",
            "parameters": {
                "upstreamBranches": "$actions.simplifyAll.outputs",
                "message": "Rewrite $($params.source) to $($params.target)$($params.comment -eq '' ? '' : \" for $($params.comment)\")"
            }
        }
    ],
    "finalize": [
        {
            "type": "set-branches",
            "parameters": {
                "branches": {
                    "$config.upstreamBranch": "$actions.upstreamHash.outputs.commit"
                }
            }
        }
    ],
    "output": [
        "$($params.source) has been replaced with $(params.target) in the following branches: $($actions.upstreamResult.outputs.Keys)"
    ]
}